name: Hotfix Release

on:
  workflow_dispatch:
    inputs:
      hotfix_branch:
        description: 'Hotfix branch name (e.g., hotfix/v1.2.1)'
        required: true
        type: string
      target_track:
        description: 'Target deployment track'
        required: true
        default: 'beta'
        type: choice
        options:
          - beta
          - production
      rollout_percentage:
        description: 'Rollout percentage (production only)'
        required: false
        default: '20'
        type: string
      skip_tests:
        description: 'Skip tests (emergency only)'
        required: false
        default: false
        type: boolean

env:
  FLUTTER_VERSION: '3.19.0'
  JAVA_VERSION: '17'
  RUBY_VERSION: '3.2'

jobs:
  validate:
    name: Validate Hotfix
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_code: ${{ steps.version.outputs.version_code }}
      proceed: ${{ steps.validate.outputs.proceed }}
    
    steps:
      - name: Checkout hotfix branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.hotfix_branch }}
          fetch-depth: 0

      - name: Validate branch name
        id: validate
        run: |
          BRANCH="${{ github.event.inputs.hotfix_branch }}"
          
          if [[ "$BRANCH" =~ ^hotfix/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Valid hotfix branch: $BRANCH"
            echo "proceed=true" >> $GITHUB_OUTPUT
          else
            echo "Invalid hotfix branch name. Must be: hotfix/vX.Y.Z"
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Extract version
        id: version
        run: |
          VERSION_LINE=$(grep "^version:" pubspec.yaml)
          VERSION_STRING=$(echo "$VERSION_LINE" | cut -d' ' -f2)
          VERSION=$(echo "$VERSION_STRING" | cut -d'+' -f1)
          BUILD=$(echo "$VERSION_STRING" | cut -d'+' -f2)
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_code=$BUILD" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Check for existing release
        uses: actions/github-script@v7
        with:
          script: |
            const tag = 'v${{ steps.version.outputs.version }}';
            try {
              await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });
              core.setFailed(`Release ${tag} already exists`);
            } catch (error) {
              if (error.status === 404) {
                console.log(`No existing release for ${tag}, proceeding`);
              } else {
                throw error;
              }
            }

  test:
    name: Quick Tests
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.proceed == 'true' && github.event.inputs.skip_tests != 'true'
    timeout-minutes: 10
    
    steps:
      - name: Checkout hotfix branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.hotfix_branch }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Run critical tests only
        run: |
          # Run only critical/smoke tests for hotfix
          flutter test test/smoke_test.dart --coverage || true
          flutter test test/critical_test.dart --coverage || true
        continue-on-error: true

      - name: Analyze code
        run: flutter analyze --no-fatal-infos

  build:
    name: Emergency Build
    runs-on: ubuntu-latest
    needs: [validate, test]
    if: always() && needs.validate.outputs.proceed == 'true'
    timeout-minutes: 20
    
    steps:
      - name: Checkout hotfix branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.hotfix_branch }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Decode Android keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.jks
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=upload-keystore.jks" >> android/key.properties

      - name: Install dependencies
        run: flutter pub get

      - name: Build AAB
        run: |
          flutter build appbundle \
            --release \
            --build-number=${{ needs.validate.outputs.version_code }} \
            --build-name=${{ needs.validate.outputs.version }}

      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: hotfix-aab-${{ needs.validate.outputs.version }}
          path: build/app/outputs/bundle/release/app-release.aab
          retention-days: 90

  deploy:
    name: Deploy Hotfix
    runs-on: ubuntu-latest
    needs: [validate, build]
    environment:
      name: hotfix-${{ github.event.inputs.target_track }}
    
    steps:
      - name: Checkout hotfix branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.hotfix_branch }}

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Download AAB
        uses: actions/download-artifact@v4
        with:
          name: hotfix-aab-${{ needs.validate.outputs.version }}
          path: build/app/outputs/bundle/release

      - name: Setup Fastlane
        run: |
          cd android
          bundle install

      - name: Decode Play Store credentials
        run: |
          echo "${{ secrets.PLAY_STORE_CONFIG_JSON }}" | base64 --decode > android/play-store-credentials.json

      - name: Deploy to Play Store
        run: |
          cd android
          
          if [ "${{ github.event.inputs.target_track }}" == "production" ]; then
            # Staged rollout for production hotfix
            bundle exec fastlane deploy_to_play_store \
              track:production \
              aab_path:../build/app/outputs/bundle/release/app-release.aab \
              version_name:${{ needs.validate.outputs.version }} \
              version_code:${{ needs.validate.outputs.version_code }} \
              rollout:0.${{ github.event.inputs.rollout_percentage }}
          else
            # Full deployment for beta
            bundle exec fastlane deploy_to_play_store \
              track:${{ github.event.inputs.target_track }} \
              aab_path:../build/app/outputs/bundle/release/app-release.aab \
              version_name:${{ needs.validate.outputs.version }} \
              version_code:${{ needs.validate.outputs.version_code }}
          fi
        env:
          SUPPLY_JSON_KEY: play-store-credentials.json

      - name: Tag release
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag v${{ needs.validate.outputs.version }}
          git push origin v${{ needs.validate.outputs.version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          name: Hotfix ${{ needs.validate.outputs.version }}
          body: |
            ## üî• Hotfix Release
            
            This is an emergency hotfix release.
            
            **Version**: ${{ needs.validate.outputs.version }}
            **Track**: ${{ github.event.inputs.target_track }}
            **Rollout**: ${{ github.event.inputs.rollout_percentage }}%
            
            ### Changes
            Please check commit history for details.
            
            ### Deployment
            - Deployed directly to ${{ github.event.inputs.target_track }} track
            - Bypassed standard testing procedures due to emergency nature
            
            ‚ö†Ô∏è **Note**: This is a hotfix release. Please ensure thorough testing in production.
          draft: false
          prerelease: false
          files: build/app/outputs/bundle/release/app-release.aab

      - name: Merge back to main
        if: success()
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Create PR to merge hotfix back to main
          gh pr create \
            --title "Merge hotfix ${{ needs.validate.outputs.version }} back to main" \
            --body "Automated PR to merge hotfix changes back to main branch" \
            --base main \
            --head ${{ github.event.inputs.hotfix_branch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Critical notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            üî• HOTFIX DEPLOYMENT
            Version: ${{ needs.validate.outputs.version }}
            Target: ${{ github.event.inputs.target_track }}
            Status: ${{ job.status }}
            Deployed by: ${{ github.actor }}
            
            Action Required: Monitor rollout closely!
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true

  monitor:
    name: Create Monitoring Issue
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: success()
    
    steps:
      - name: Create hotfix monitoring issue
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const version = '${{ needs.validate.outputs.version }}';
            const track = '${{ github.event.inputs.target_track }}';
            
            const issue = await github.rest.issues.create({
              owner,
              repo,
              title: `üî• Hotfix Monitoring: ${version}`,
              body: `## Hotfix Release Monitoring
              
              **Version**: ${version}
              **Track**: ${track}
              **Deployed**: ${new Date().toISOString()}
              **Deployed by**: @${{ github.actor }}
              
              ### ‚ö†Ô∏è Critical Monitoring Required
              
              This is a hotfix release that bypassed normal testing procedures.
              
              ### Monitoring Checklist (First 24 Hours)
              
              #### Every Hour (First 6 hours)
              - [ ] Check crash rate
              - [ ] Monitor ANR rate
              - [ ] Review user feedback
              - [ ] Check server logs
              
              #### Every 3 Hours (6-24 hours)
              - [ ] Crash rate trending
              - [ ] Performance metrics
              - [ ] User ratings
              
              ### Metrics to Watch
              
              | Metric | Baseline | Current | Status |
              |--------|----------|---------|--------|
              | Crash Rate | <1% | - | ‚è≥ |
              | ANR Rate | <0.5% | - | ‚è≥ |
              | 1-Star Reviews | - | - | ‚è≥ |
              | API Errors | - | - | ‚è≥ |
              
              ### Rollback Criteria
              
              Immediately rollback if any of these occur:
              - Crash rate increases >2%
              - ANR rate increases >1%
              - Critical functionality broken
              - Server errors spike >5%
              
              ### Actions
              
              - **Increase Rollout**: Run "Promote Release" workflow
              - **Halt Rollout**: Run "Halt Rollout" workflow
              - **Rollback**: Restore previous version in Play Console
              
              ### Notes
              
              Add monitoring observations below:
              
              ---
              `,
              labels: ['hotfix', 'critical', 'monitoring'],
              assignees: ['${{ github.actor }}']
            });
            
            console.log(`Created monitoring issue: #${issue.data.number}`);